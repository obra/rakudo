# Copyright (C) 2006-2009, The Perl Foundation.
# $Id$

# arguments we want to run parrot with
PARROT_ARGS =

# Where should we be installing rakudo
DESTDIR		      =
PREFIX		      = @install-prefix@
INSTALL			  = install
INSTALL_BIN_DIR	  = $(PREFIX)/bin/
INSTALL_LIB_DIR	  = $(PREFIX)/lib/rakudo/perl6
INSTALL_SITE_LIB_DIR	  = $(PREFIX)/lib/rakudo/site_perl6

# Where should we find code to install
RAKUDO_BINARIES	  = ./perl6 
RAKUDO_PERL6_LIB  = ./lib

# values from parrot_config
BUILD_DIR     = @build_dir@
LOAD_EXT      = @load_ext@
O             = @o@
EXE           = @exe@
PERL          = @perl@
RM_F          = @rm_f@
HAS_ICU       = @has_icu@

# Various paths
PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
PERL6GRAMMAR  = $(BUILD_DIR)/runtime/parrot/library/PGE/Perl6Grammar.pbc
NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
PMC_DIR       = src/pmc
OPSDIR        = src/ops
OPSLIB        = perl6
OPS_FILE      = src/ops/perl6.ops


# Setup some commands
PARROT        = $(BUILD_DIR)/parrot$(EXE)
CAT           = $(PERL) -MExtUtils::Command -e cat
BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
BUILD_DYNOPS  = $(PERL) $(BUILD_DIR)/tools/build/dynoplibs.pl
RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
PBC_TO_EXE    = $(BUILD_DIR)/pbc_to_exe$(EXE)

SOURCES = perl6.pir \
  src/gen_grammar.pir \
  src/gen_actions.pir \
  src/gen_builtins.pir \
  src/gen_metaop.pir \
  src/gen_junction.pir \
  src/gen_whatever.pir \
  src/parser/expression.pir \
  src/parser/methods.pir \
  src/parser/quote_expression.pir \
  src/parrot/ClassHOW.pir \
  src/parrot/Protoobject.pir \
  src/parrot/P6role.pir \
  src/parrot/misc.pir \
  src/parrot/state.pir \
  src/gen_uprop.pir \
  $(PERL6_GROUP) \
  src/ops/perl6_ops$(LOAD_EXT)

BUILTINS_PIR = \
  src/classes/Object.pir \
  src/classes/Any.pir \
  src/classes/Junction.pir \
  src/classes/Signature.pir \
  src/classes/Role.pir \
  src/classes/Abstraction.pir \
  src/classes/Positional.pir \
  src/classes/Associative.pir \
  src/classes/Callable.pir \
  src/classes/Bool.pir \
  src/classes/Str.pir \
  src/classes/Num.pir \
  src/classes/Int.pir \
  src/classes/Order.pir \
  src/classes/Complex.pir \
  src/classes/IO.pir \
  src/classes/List.pir \
  src/classes/Array.pir \
  src/classes/Mapping.pir \
  src/classes/Hash.pir \
  src/classes/Range.pir \
  src/classes/Code.pir \
  src/classes/Block.pir \
  src/classes/Routine.pir \
  src/classes/Sub.pir \
  src/classes/Regex.pir \
  src/classes/Method.pir \
  src/classes/Submethod.pir \
  src/classes/Multi.pir \
  src/classes/Failure.pir \
  src/classes/Exception.pir \
  src/classes/Nil.pir \
  src/classes/Pair.pir \
  src/classes/Whatever.pir \
  src/classes/WhateverCode.pir \
  src/classes/Capture.pir \
  src/classes/Match.pir \
  src/classes/Grammar.pir \
  src/classes/Module.pir \
  src/classes/Iterator.pir \
  src/builtins/globals.pir \
  src/builtins/any-list.pir \
  src/builtins/any-num.pir \
  src/builtins/any-str.pir \
  src/builtins/assign.pir \
  src/builtins/cmp.pir \
  src/builtins/compiler.pir \
  src/builtins/control.pir \
  src/builtins/eval.pir \
  src/builtins/guts.pir \
  src/builtins/io.pir \
  src/builtins/match.pir \
  src/builtins/math.pir \
  src/builtins/named-unary.pir \
  src/builtins/op.pir \
  src/builtins/system.pir \

SETTING = \
  src/setting/Any-list.pm \
  src/setting/Any-num.pm \
  src/setting/Any-str.pm \
  src/setting/Array.pm \
  src/setting/Bool.pm \
  src/setting/Hash.pm \
  src/setting/IO.pm \
  src/setting/IO/Socket.pm \
  src/setting/IO/Socket/INET.pm \
  src/setting/List.pm \
  src/setting/Match.pm \
  src/setting/Num.pm \
  src/setting/Object.pm \
  src/setting/Operators.pm \
  src/setting/Pair.pm \
  src/setting/Range.pm \
  src/setting/Temporal.pm \
  src/setting/Whatever.pm \

PMCS        = perl6str objectref perl6scalar mutablevar perl6multisub p6invocation p6opaque p6role

PMC_SOURCES = $(PMC_DIR)/perl6str.pmc $(PMC_DIR)/objectref.pmc $(PMC_DIR)/perl6scalar.pmc \
              $(PMC_DIR)/mutablevar.pmc $(PMC_DIR)/perl6multisub.pmc $(PMC_DIR)/p6invocation.pmc \
              $(PMC_DIR)/p6opaque.pmc $(PMC_DIR)/p6role.pmc

PERL6_GROUP = $(PMC_DIR)/perl6_group$(LOAD_EXT)

CLEANUPS = \
  perl6.pbc \
  perl6.c \
  *.manifest \
  *.pdb \
  perl6$(O) \
  perl6$(EXE) \
  perl6_s1.pbc \
  Test.pir \
  src/gen_*.pir \
  src/gen_*.pm \
  $(PMC_DIR)/*.h \
  $(PMC_DIR)/*.c \
  $(PMC_DIR)/*.dump \
  $(PMC_DIR)/*$(O) \
  $(PMC_DIR)/*$(LOAD_EXT) \
  $(PMC_DIR)/*.exp \
  $(PMC_DIR)/*.ilk \
  $(PMC_DIR)/*.manifest \
  $(PMC_DIR)/*.pdb \
  $(PMC_DIR)/*.lib \
  $(PMC_DIR)/objectref.pmc \
  $(OPSDIR)/*.h \
  $(OPSDIR)/*.c \
  $(OPSDIR)/*$(O) \
  $(OPSDIR)/*$(LOAD_EXT) \

# NOTE: eventually, we should remove --keep-exit-code and --fudge
#       as the goal is that all tests must pass without fudge
HARNESS_WITH_FUDGE = $(PERL) t/harness --fudge --keep-exit-code --icu=$(HAS_ICU)
HARNESS_WITH_FUDGE_JOBS = $(HARNESS_WITH_FUDGE) --jobs


# the default target
all: perl6$(EXE)

xmas: perl6$(EXE)

##  targets for building a standalone perl6.
perl6$(EXE): perl6.pbc
	$(PBC_TO_EXE) perl6.pbc
	@win32_libparrot_copy@

# the Perl 6 compiler
perl6.pbc: perl6_s1.pbc src/gen_setting.pm
	$(PARROT) $(PARROT_ARGS) perl6_s1.pbc --target=pir src/gen_setting.pm > src/gen_setting.pir
	$(PARROT) $(PARROT_ARGS) -o perl6.pbc perl6.pir

# the Perl 6 stage-1 compiler
perl6_s1.pbc: $(PARROT) $(SOURCES) $(BUILTINS_PIR)
	$(PERL) -e "" > src/gen_setting.pir
	$(PARROT) $(PARROT_ARGS) -o perl6_s1.pbc perl6.pir

src/gen_grammar.pir: $(PARROT) $(PERL6GRAMMAR) src/parser/grammar.pg src/parser/grammar-oper.pg
	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
	    --output=src/gen_grammar.pir --encoding=utf8 \
	    src/parser/grammar.pg src/parser/grammar-oper.pg

src/gen_actions.pir: $(PARROT) $(NQP) $(PCT) src/parser/actions.pm
	$(PARROT) $(PARROT_ARGS) $(NQP) --output=src/gen_actions.pir \
	    --encoding=fixed_8 --target=pir src/parser/actions.pm

src/gen_builtins.pir: build/gen_builtins_pir.pl
	$(PERL) build/gen_builtins_pir.pl $(BUILTINS_PIR) > src/gen_builtins.pir

src/gen_metaop.pir: build/gen_metaop_pir.pl
	$(PERL) build/gen_metaop_pir.pl > src/gen_metaop.pir

src/gen_junction.pir: build/gen_junction_pir.pl
	$(PERL) build/gen_junction_pir.pl > src/gen_junction.pir

src/gen_whatever.pir: build/gen_whatever_pir.pl
	$(PERL) build/gen_whatever_pir.pl > src/gen_whatever.pir

src/gen_uprop.pir: build/gen_uprop_pir.pl
	$(PERL) build/gen_uprop_pir.pl > src/gen_uprop.pir

src/gen_setting.pm: build/gen_setting_pm.pl $(SETTING)
	$(PERL) build/gen_setting_pm.pl $(SETTING) > src/gen_setting.pm

$(PERL6_GROUP): $(PARROT) $(PMC_SOURCES)
	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)

src/ops/perl6_ops$(LOAD_EXT) : $(PARROT) $(OPS_FILE)
	@cd $(OPSDIR) && $(BUILD_DYNOPS) generate $(OPSLIB)
	@cd $(OPSDIR) && $(BUILD_DYNOPS) compile $(OPSLIB)
	@cd $(OPSDIR) && $(BUILD_DYNOPS) linklibs $(OPSLIB)
	@cd $(OPSDIR) && $(BUILD_DYNOPS) copy "--destination=$(PARROT_DYNEXT)" $(OPSLIB)

$(PMC_DIR)/objectref.pmc : $(PMC_DIR)/objectref_pmc.template build/gen_objectref_pmc.pl
	$(PERL) -I$(BUILD_DIR)/lib build/gen_objectref_pmc.pl $(PMC_DIR)/objectref_pmc.template \
		$(PMC_DIR)/objectref.pmc


##  testing targets
Test.pir: Test.pm perl6.pbc
	$(PARROT) $(PARROT_ARGS) perl6.pbc --target=pir --output=Test.pir Test.pm

test    : coretest

fulltest: coretest spectest

coretest: perl6$(EXE)
	$(PERL) t/harness t/00-parrot t/01-sanity

# Run the spectests that we know work.
spectest_regression: spectest
spectest: testable t/spectest.data
	$(HARNESS_WITH_FUDGE_JOBS) --tests-from-file=t/spectest.data

spectest_full: testable
	$(HARNESS_WITH_FUDGE_JOBS) t/spec

spectest_checkout : t/spec
t/spec :
	svn co "http://svn.pugscode.org/pugs/t/spec" t/spec

spectest_update :
	-cd t/spec && svn up

testable : perl6$(EXE) Test.pir spectest_checkout spectest_update

t/localtest.data:
	$(PERL) -MExtUtils::Command -e test_f $@

# Run the tests in t/localtest.data
localtest: all Test.pir spectest_checkout t/localtest.data
	@$(HARNESS_WITH_FUDGE_JOBS) --tests-from-file=t/localtest.data

# Run the tests in t/localtest.data with a higher verbosity
localtest_loud: all Test.pir spectest_checkout t/localtest.data
	@$(HARNESS_WITH_FUDGE) --tests-from-file=t/localtest.data --verbosity=1

# Run many tests of your choise.
# make sometests TESTFILES=t/foo/bar
sometests: all
	@$(HARNESS_WITH_FUDGE_JOBS) $(TESTFILES)

# Run a single test
t/*.t t/*/*.t t/*/*/*.t: all Test.pir
	@$(HARNESS_WITH_FUDGE) --verbosity=1 $@

##  cleaning
clean:
	$(RM_F) $(CLEANUPS)

distclean: realclean

realclean: clean
	$(RM_F) Makefile

testclean:


##  miscellaneous targets
# a listing of all targets meant to be called by users
help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  all:               perl6.pbc"
	@echo "                     This is the default."
	@echo "  perl6$(EXE):       Some want a pony, others are satisfied with an executable."
	@echo "  xmas:              Christmas is when Perl 6 is released. Alias of perl6$(EXE)."
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run Rakudo's sanity tests."
	@echo "  spectest:          Run the tests of the official test suite that are expected to pass."
	@echo "  fulltest:          Run sanity tests and spectests."
	@echo "  spectest_full:     Run all tests of the official test suite."
	@echo "  localtest:         Run the official tests given in t/localtest.data."
	@echo "  spectest_checkout: Performs svn checkout of official test suite."
	@echo "  spectest_update:   Performs svn update of official test suite."
	@echo "  testable:          Create the perl6 executable, compile the Test library,"
	@echo "                     and update official test suite."
	@echo ""
	@echo "Maintenance:"
	@echo "  perlcritic:        Run Perl::Critic on all the Perl 5 code."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  distclean:         Removes also anything built, in theory."
	@echo "  realclean:         Removes also files generated by 'Configure.pl'."
	@echo "  testclean:         Clean up test results."
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

Makefile: build/Makefile.in build/PARROT_REVISION $(PARROT) Configure.pl
	@echo ""
	@echo "warning: Makefile is out of date... re-run Configure.pl"
	@echo ""

config:
	$(PERL) Configure.pl
	

install: all check-install-dir install-bin install-lib

check-install-dir:
	@[ -d '$(DESTDIR)$(PREFIX)' ] ||  (echo "Your installation prefix '$(PREFIX)' doesn't seem to exist.\n\nPlease create it or specify another directory with the --prefix argument\nto Configure.pl." ; exit -1)

install-bin:
	$(INSTALL) -m 0755 -d $(DESTDIR)$(INSTALL_BIN_DIR)
	for file in $(RAKUDO_BINARIES) ; do \
        $(INSTALL) -m 0755 "$$file" "$(DESTDIR)$(INSTALL_BIN_PATH)/" ; \
    done


install-lib:
	$(INSTALL) -m 0755 -d $(DESTDIR)$(INSTALL_SITE_LIB_DIR)
	[ -d $(DESTDIR)$(INSTALL_LIB_DIR) ] || $(INSTALL) -m 0755 -d $(DESTDIR)$(INSTALL_LIB_DIR)
	-( cd lib && find . -type d -name .svn -prune -o -type d -print ) | while read dir ; do \
		$(INSTALL) -m 0755 -d "$(DESTDIR)$(INSTALL_LIB_DIR)/$$dir" ; \
   done
	-( cd lib && find . -type d -name .svn -prune -o -type f -print ) | while read file ; do \
	$(INSTALL) -m 0644 "lib/$$file" "$(DESTDIR)$(INSTALL_LIB_DIR)/$$file" ; \
	done



##  Parrot targets
parrot: build/PARROT_REVISION build/gen_parrot.pl
	$(PERL) Configure.pl --gen-parrot
$(PARROT): 


CRITIC_FILES=Configure.pl t/harness build/ tools/

perlcritic:
	perlcritic -1 --profile tools/util/perlcritic.conf $(CRITIC_FILES)

manifest:
	echo MANIFEST >MANIFEST
	git ls-files | $(PERL) -ne '/^\./ || print' >>MANIFEST
	rm -rf t/spec
	svn export "http://svn.pugscode.org/pugs/t/spec" t/spec
	find t/spec -type f >>MANIFEST
	sort -u -o MANIFEST MANIFEST

release: manifest
	[ -n "$(VERSION)" ] || ( echo "\nTry 'make release VERSION=yyyymm'\n\n"; exit 1 )
	[ -d rakudo-$(VERSION) ] || ln -s . rakudo-$(VERSION)
	$(PERL) -ne 'print "rakudo-$(VERSION)/$$_"' MANIFEST | \
	    tar -zcv -T - -f rakudo-$(VERSION).tar.gz
	rm rakudo-$(VERSION)
